import streamlit as st
import pandas as pd
import shap
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.svm import SVC
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from sklearn.neighbors import KNeighborsClassifier
from utils import load_data, count_keywords

# Caminho do dataset
parquet_path = "dataset/parquet/tcc_ceds_music.parquet"
df = load_data(parquet_path)
if df is None:
    st.stop()

if 'year' not in df.columns:
    if 'release_date' in df.columns:
        df['release_date'] = df['release_date'].astype(str).str.replace(",", "").str.split(".").str[0]
        df['year'] = pd.to_numeric(df['release_date'], errors='coerce')
        df['decade'] = (df['year'] // 10 * 10).astype('Int64')
    else:
        st.error("Erro: A coluna 'year' n√£o foi encontrada no dataset. Verifique o formato do arquivo.")
        st.stop()

# P√°gina de Classifica√ß√£o de G√™neros
st.title("üéº Classifica√ß√£o de G√™neros")
st.markdown("""
Esta aplica√ß√£o permite classificar g√™neros musicais com base em palavras-chave extra√≠das das letras. 
Escolha um modelo de classifica√ß√£o, insira palavras-chave ou uma letra de m√∫sica e veja o g√™nero previsto.
""")

# Dicion√°rio de palavras-chave por g√™nero
keywords = {
    "blues": ["sad", "blues", "heartbreak", "crying", "rain", "whiskey", "trouble", "lonely", "devil", "soul", "pain"],
    "country": ["cowboy", "boots", "country", "ranch", "honky", "tumbleweed", "truck", "whiskey", "barn", "horse", "southern", "fiddle"],
    "pop": ["party", "love", "dance", "night", "club", "girl", "boy", "baby", "radio", "top", "dream", "kiss", "music", "heart"],
    "hip_hop": ["rap", "street", "flow", "beat", "b-boy", "gangsta", "money", "hustle", "rhymes", "mic", "crew", "trap", "real"],
    "jazz": ["improvisation", "saxophone", "swing", "blues", "jazz", "piano", "trumpet", "bass", "chords", "melody", "harmony", "scat"],
    "reggae": ["rasta", "dub", "jah", "roots", "bob", "rastafari", "ganja", "irie", "vibes", "marley", "sunshine", "peace", "one love"],
    "rock": ["guitar", "rock", "band", "concert", "stage", "electric", "drums", "solo", "riff", "headbang", "loud", "rebel", "live"]
}

# Usar o dataset completo, sem filtrar por g√™nero
df_filtered = df  # Remova o filtro por g√™nero

# Preparar os dados
df_filtered = df_filtered.dropna(subset=['lyrics', 'genre'])
df_filtered['lyrics'] = df_filtered['lyrics'].fillna('')

X = []
y = []

for _, row in df_filtered.iterrows():
    lyrics = str(row['lyrics'])
    genre = row['genre']
    genre_counts = {genre_name: count_keywords(lyrics, genre_keywords) for genre_name, genre_keywords in keywords.items()}
    X.append(list(genre_counts.values()))
    y.append(genre)

X = pd.DataFrame(X, columns=keywords.keys())
y = pd.Series(y)

# Visualizar a distribui√ß√£o das classes antes do balanceamento
st.write("### üìä Distribui√ß√£o das Classes Antes do Balanceamento")
class_distribution_before = y.value_counts()
plt.figure(figsize=(10, 6))
class_distribution_before.plot(kind='barh', color='skyblue')  # Gr√°fico horizontal
plt.xlabel("N√∫mero de Exemplos")
plt.ylabel("G√™nero Musical")
plt.title("Distribui√ß√£o das Classes Antes do Balanceamento")
st.pyplot(plt)

# Dividir os dados em treino e teste
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Aplicar SMOTE para balancear as classes no conjunto de treinamento
smote = SMOTE(random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)

# Visualizar a distribui√ß√£o das classes ap√≥s o balanceamento
st.write("### üìä Distribui√ß√£o das Classes Ap√≥s o Balanceamento (SMOTE)")
class_distribution_after = pd.Series(y_train_resampled).value_counts()
plt.figure(figsize=(10, 6))
class_distribution_after.plot(kind='barh', color='lightgreen')  # Gr√°fico horizontal
plt.xlabel("N√∫mero de Exemplos")
plt.ylabel("G√™nero Musical")
plt.title("Distribui√ß√£o das Classes Ap√≥s o Balanceamento")
st.pyplot(plt)

# =====================================
# Se√ß√£o 2: Escolha do Modelo
# =====================================
st.write("### üîß Escolha do Modelo")
model_choice = st.selectbox(
    "Selecione o modelo de classifica√ß√£o:",
    ["Random Forest", "SVM", "SVM + SMOTE", "KNN + Undersampling"],
    help="Escolha um modelo para classificar os g√™neros musicais.",
    key="model_choice_selectbox"  # Adicionando uma chave √∫nica
)

# Configurar o modelo selecionado
if model_choice == "Random Forest":
    model = RandomForestClassifier(n_estimators=100, random_state=42)
elif model_choice == "SVM":
    model = SVC(kernel='linear', random_state=42, probability=True)
elif model_choice == "SVM + SMOTE":
    model = SVC(kernel='linear', random_state=42, probability=True)
elif model_choice == "KNN + Undersampling":
    undersampler = RandomUnderSampler(random_state=42)
    X_train_resampled, y_train_resampled = undersampler.fit_resample(X_train, y_train)
    model = KNeighborsClassifier(n_neighbors=5)

# Treinar o modelo com os dados balanceados
model.fit(X_train_resampled, y_train_resampled)

# =====================================
# Se√ß√£o 3: Avalia√ß√£o do Modelo
# =====================================
st.write("### üìä Avalia√ß√£o do Modelo")
st.markdown("""
Abaixo est√£o as m√©tricas de avalia√ß√£o do modelo selecionado.
""")

# Avaliar o modelo
y_pred = model.predict(X_test)

# Verifique os g√™neros presentes em y_test
present_genres = y_test.unique()

# Gere o relat√≥rio de classifica√ß√£o apenas com os g√™neros presentes
report = classification_report(y_test, y_pred, target_names=present_genres, output_dict=True)

# Extrair as m√©tricas para cada classe, m√©dia e m√©dia ponderada
metrics = {
    'Precis√£o': [],
    'Recall': [],
    'F1-Score': [],
    'Suporte': [],
    'Acur√°cia': []  # Adicionando Acur√°cia como uma m√©trica
}

# Preencher as m√©tricas para cada classe presente
for genre in present_genres:
    metrics['Precis√£o'].append(report[genre]['precision'])
    metrics['Recall'].append(report[genre]['recall'])
    metrics['F1-Score'].append(report[genre]['f1-score'])
    metrics['Suporte'].append(report[genre]['support'])
    metrics['Acur√°cia'].append(None)  # Acur√°cia n√£o √© por classe, ent√£o deixamos como None

# Adicionar as m√©tricas de m√©dia
metrics['Precis√£o'].append(report['macro avg']['precision'])
metrics['Recall'].append(report['macro avg']['recall'])
metrics['F1-Score'].append(report['macro avg']['f1-score'])
metrics['Suporte'].append(report['macro avg']['support'])
metrics['Acur√°cia'].append(report['accuracy'])  # Acur√°cia na coluna "M√©dia"

# Adicionar as m√©tricas de m√©dia ponderada
metrics['Precis√£o'].append(report['weighted avg']['precision'])
metrics['Recall'].append(report['weighted avg']['recall'])
metrics['F1-Score'].append(report['weighted avg']['f1-score'])
metrics['Suporte'].append(None)  # Suporte n√£o tem m√©dia ponderada, ent√£o deixamos como None
metrics['Acur√°cia'].append(None)  # Acur√°cia n√£o √© aplic√°vel √† m√©dia ponderada

# Criar DataFrame com as m√©tricas
index = list(present_genres) + ['M√©dia', 'M√©dia Ponderada']
metrics_df = pd.DataFrame(metrics, index=index)

# Transpor o DataFrame para que as m√©tricas fiquem nas linhas e as classes nas colunas
metrics_df = metrics_df.transpose()

# Exibir a tabela
st.write("M√©tricas de Avalia√ß√£o:")
st.dataframe(metrics_df)

st.markdown("""
- **Precision**: A propor√ß√£o de previs√µes corretas para um g√™nero espec√≠fico.
- **Recall**: A propor√ß√£o de inst√¢ncias corretamente classificadas de um g√™nero.
- **F1-Score**: A m√©dia harm√¥nica entre precision e recall.
- **Support**: O n√∫mero de ocorr√™ncias de cada g√™nero no conjunto de teste.
- **Acur√°cia**: A propor√ß√£o de previs√µes corretas em rela√ß√£o ao total de previs√µes.
""")

# =====================================
# Explicabilidade com SHAP
# =====================================
st.write("### üîç Explicabilidade do Modelo com SHAP")

st.markdown("""
O SHAP (SHapley Additive exPlanations) √© um m√©todo baseado na teoria dos valores de Shapley, que vem da teoria dos jogos. 
Ele permite entender **quais caracter√≠sticas mais influenciam as previs√µes do modelo**, mostrando a import√¢ncia de cada palavra-chave na determina√ß√£o do g√™nero musical.

Aqui, usamos o SHAP para visualizar como o modelo Random Forest classifica os g√™neros musicais. O gr√°fico gerado exibe quais palavras-chave t√™m maior impacto na decis√£o do modelo.
""")

# Checkbox para ativar a explicabilidade SHAP
explain_shap = st.checkbox("Gerar Explicabilidade SHAP (pode ser lento)")

if explain_shap and model_choice == "Random Forest":
    st.markdown("""
    O gr√°fico abaixo mostra a contribui√ß√£o de cada palavra-chave para a decis√£o do modelo. 
    - **Cores**: Representam diferentes classes (g√™neros musicais).
    - **Barras maiores**: Indicam que a caracter√≠stica teve um impacto significativo na previs√£o do modelo.
    """)

    # Criando o explicador SHAP para o modelo Random Forest
    explainer = shap.Explainer(model, X_train_resampled)
    shap_values = explainer(X_test[:50])  # Pegamos apenas 50 amostras para otimizar o tempo de gera√ß√£o
    
    # Criando a figura antes de chamar o SHAP
    fig, ax = plt.subplots(figsize=(10, 5))
    shap.summary_plot(shap_values, X_test[:50], feature_names=X_test.columns, show=False)
    
    # Exibindo o gr√°fico no Streamlit
    st.pyplot(fig)

    st.markdown("""
    üîπ **Interpreta√ß√£o do gr√°fico**:
    - Se uma palavra-chave aparece frequentemente no topo, significa que ela influencia fortemente as previs√µes do modelo.
    - O tamanho da barra indica a magnitude do impacto da palavra-chave no resultado final.
    - As cores mostram a contribui√ß√£o para diferentes classes de g√™neros musicais.

    Este tipo de an√°lise ajuda a entender **como** o modelo toma suas decis√µes e **se ele est√° aprendendo corretamente os padr√µes das letras musicais**.
    """)


# =====================================
# Se√ß√£o 3: Simula√ß√£o de Classifica√ß√£o
# =====================================
st.write("### üéµ Simula√ß√£o de Classifica√ß√£o")
st.markdown("""
Insira palavras-chave ou uma letra de m√∫sica para classificar o g√™nero.
""")

# Input do usu√°rio
user_input = st.text_area("Insira palavras-chave ou uma letra de m√∫sica:")

if user_input:
    user_counts = {genre_name: count_keywords(user_input, genre_keywords) for genre_name, genre_keywords in keywords.items()}
    user_X = pd.DataFrame([list(user_counts.values())], columns=keywords.keys())

    # Prever o g√™nero e as probabilidades
    predicted_genre = model.predict(user_X)
    predicted_proba = model.predict_proba(user_X)

    st.success(f"### üé∂ O g√™nero previsto √©: **{predicted_genre[0]}**")
    
    # Exibir probabilidades
    st.write("### Probabilidades por G√™nero:")
    proba_df = pd.DataFrame(predicted_proba, columns=model.classes_)
    st.dataframe(proba_df)

    # Gr√°fico de barras das probabilidades
    st.write("### üìä Probabilidades por G√™nero (Gr√°fico)")
    plt.figure(figsize=(10, 6))
    proba_df.T.plot(kind='barh', legend=False)  # Gr√°fico horizontal
    plt.xlabel("Probabilidade")
    plt.ylabel("G√™nero Musical")
    plt.title("Probabilidades de Classifica√ß√£o por G√™nero")
    st.pyplot(plt)

class_distribution = df["genre"].value_counts()
print("Distribui√ß√£o das Classes:")
print(class_distribution)

# Crie um gr√°fico de barras para visualizar a distribui√ß√£o
plt.figure(figsize=(10, 6))
plt.bar(class_distribution.index, class_distribution.values, color='skyblue')
plt.xlabel("G√™nero Musical")
plt.ylabel("N√∫mero de Exemplos")
plt.title("Distribui√ß√£o das Classes no Conjunto de Treinamento")
plt.xticks(rotation=45)  # Rotaciona os r√≥tulos do eixo X para melhor visualiza√ß√£o
plt.show()